1、ZK是分布式应用程序协调服务，分布式应用可以通过它实现服务同步、配置维护和命名服务等；
2、ZK的基本概念
    角色：
        领导者:负责进行投票的发起和决议，更新系统状态
        学习者
            跟随者：用户接受客服请求并向客户端返回结果，在选主过程中参与投票
            观察者：可以接受客户端连接，将写请求转发给leader节点，不参加投票只同步leader状态，目的是为了扩展系统，提高读取速度
        客户端：请求发起方

3、设计目的
    最终一致性：client不论连接到哪个Server，展示给它都是同一个视图。
    可靠性：具有简单、健壮、良好的性能，如果消息m被到一台服务器接受，那么它将被所有的服务器接受。
    实时性：保证客户端在一时间间隔范围内获取服务器的更新信息，或者服务器失效的信息，但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。
    等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。
    原子性：更新只能成功或者失败，没有中间状态。
    顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。

4、ZooKeeper的工作原理
    ZK核心是原子广播，这种机制保证了各个Server之间的同步，实现这种协议叫做Zab协议，Zab协议有两种，恢复模式（选主）和广播模式（同步）当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。
    为了保证事务的顺序一致性，ZK采用了递增id号（zxid）来标识事务，所有的提议都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。

    4.1选主流程
        当领导者崩溃或者leader丢失大多数跟随者，ZK就进入恢复模式，恢复模式需要重新选取领导者，让所有的Server都恢复到一个正确的状态，
        ZK选举有两种算法：一种基于basic paxos实现   基于fast paxos算法实现（默认）
    4.2 同步流程
       选完leader以后，zk就进入状态同步过程。
       1. leader等待server连接；
       2 .Follower连接leader，将最大的zxid发送给leader；
       3 .Leader根据follower的zxid确定同步点；
       4 .完成同步后通知follower 已经成为uptodate状态；
       5 .Follower收到uptodate消息后，又可以重新接受client的请求进行服务了。

    4.3工作流程
        Leader主要有三个功能：
        1 .恢复数据；
        2 .维持与Learner的心跳，接收Learner请求并判断Learner的请求消息类型；
        3 .Learner的消息类型主要有PING消息、REQUEST消息、ACK消息、REVALIDATE消息，根据不同的消息类型，进行不同的处理

        PING消息是指Learner的心跳信息；REQUEST消息是Follower发送的提议信息，包括写请求及同步请求；ACK消息是Follower的对提议的回复，超过半数的Follower通过，则commit该提议；REVALIDATE消息是用来延长SESSION有效时间。

         Follower工作流程
         Follower主要有四个功能：
         1. 向Leader发送请求（PING消息、REQUEST消息、ACK消息、REVALIDATE消息）；
         2 .接收Leader消息并进行处理；
         3 .接收Client的请求，如果为写请求，发送给Leader进行投票；
         4 .返回Client结果。
         Follower的消息循环处理如下几种来自Leader的消息：
         1 .PING消息： 心跳消息；
         2 .PROPOSAL消息：Leader发起的提案，要求Follower投票；
         3 .COMMIT消息：服务器端最新一次提案的信息；
         4 .UPTODATE消息：表明同步完成；
         5 .REVALIDATE消息：根据Leader的REVALIDATE结果，关闭待revalidate的session还是允许其接受消息；
         6 .SYNC消息：返回SYNC结果到客户端，这个消息最初由客户端发起，用来强制得到最新的更新。